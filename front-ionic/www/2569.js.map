{"version":3,"file":"2569.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, e as Host, f as getElement } from './index-527b9e34.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-78efeec3.js';\nimport { a as printIonError } from './index-738d7504.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-ca86cf32.js';\nimport { s as parseDate, x as getToday, L as getHourCycle, N as getLocalizedDateTime, M as getLocalizedTime } from './data-174ad5e0.js';\n\nconst datetimeButtonIosCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}:host button{-webkit-padding-start:13px;padding-inline-start:13px;-webkit-padding-end:13px;padding-inline-end:13px;padding-top:7px;padding-bottom:7px}:host button.ion-activated{color:var(--ion-color-step-600, var(--ion-text-color-step-400, #666666))}\";\nconst IonDatetimeButtonIosStyle0 = datetimeButtonIosCss;\n\nconst datetimeButtonMdCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}:host button{-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px}\";\nconst IonDatetimeButtonMdStyle0 = datetimeButtonMdCss;\n\nconst DatetimeButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.datetimeEl = null;\n        this.overlayEl = null;\n        /**\n         * Accepts one or more string values and converts\n         * them to DatetimeParts. This is done so datetime-button\n         * can work with an array internally and not need\n         * to keep checking if the datetime value is `string` or `string[]`.\n         */\n        this.getParsedDateValues = (value) => {\n            if (value === undefined || value === null) {\n                return [];\n            }\n            if (Array.isArray(value)) {\n                return value;\n            }\n            return [value];\n        };\n        /**\n         * Check the value property on the linked\n         * ion-datetime and then format it according\n         * to the locale specified on ion-datetime.\n         */\n        this.setDateTimeText = () => {\n            var _a, _b, _c, _d, _e;\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            const { value, locale, formatOptions, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\n            const parsedValues = this.getParsedDateValues(value);\n            /**\n             * Both ion-datetime and ion-datetime-button default\n             * to today's date and time if no value is set.\n             */\n            const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n            if (!parsedDatetimes) {\n                return;\n            }\n            /**\n             * If developers incorrectly use multiple=\"true\"\n             * with non \"date\" datetimes, then just select\n             * the first value so the interface does\n             * not appear broken. Datetime will provide a\n             * warning in the console.\n             */\n            const firstParsedDatetime = parsedDatetimes[0];\n            const computedHourCycle = getHourCycle(locale, hourCycle);\n            this.dateText = this.timeText = undefined;\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _a !== void 0 ? _a : { month: 'short', day: 'numeric', year: 'numeric' });\n                    const timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    if (preferWheel) {\n                        this.dateText = `${dateText} ${timeText}`;\n                    }\n                    else {\n                        this.dateText = dateText;\n                        this.timeText = timeText;\n                    }\n                    break;\n                case 'date':\n                    if (multiple && parsedValues.length !== 1) {\n                        let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n                        if (titleSelectedDatesFormatter !== undefined) {\n                            try {\n                                headerText = titleSelectedDatesFormatter(parsedValues);\n                            }\n                            catch (e) {\n                                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n                            }\n                        }\n                        this.dateText = headerText;\n                    }\n                    else {\n                        this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_b = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _b !== void 0 ? _b : { month: 'short', day: 'numeric', year: 'numeric' });\n                    }\n                    break;\n                case 'time':\n                    this.timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    break;\n                case 'month-year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_c = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _c !== void 0 ? _c : { month: 'long', year: 'numeric' });\n                    break;\n                case 'month':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_d = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _d !== void 0 ? _d : { month: 'long' });\n                    break;\n                case 'year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_e = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _e !== void 0 ? _e : { year: 'numeric' });\n                    break;\n            }\n        };\n        /**\n         * Waits for the ion-datetime to re-render.\n         * This is needed in order to correctly position\n         * a popover relative to the trigger element.\n         */\n        this.waitForDatetimeChanges = async () => {\n            const { datetimeEl } = this;\n            if (!datetimeEl) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve) => {\n                addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n            });\n        };\n        this.handleDateClick = async (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the date button,\n             * we need to make sure that only a date\n             * picker is displayed. For presentation styles\n             * that display content other than a date picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'date';\n                    /**\n                     * The date+time wheel picker\n                     * shows date and time together,\n                     * so do not adjust the presentation\n                     * in that case.\n                     */\n                    if (!datetimeEl.preferWheel && needsChange) {\n                        datetimeEl.presentation = 'date';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'date';\n            this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n        };\n        this.handleTimeClick = (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the time button,\n             * we need to make sure that only a time\n             * picker is displayed. For presentation styles\n             * that display content other than a time picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'time';\n                    if (needsChange) {\n                        datetimeEl.presentation = 'time';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'time';\n            this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n        };\n        /**\n         * If the datetime is presented in an\n         * overlay, the datetime and overlay\n         * should be appropriately sized.\n         * These classes provide default sizing values\n         * that developers can customize.\n         * The goal is to provide an overlay that is\n         * reasonably sized with a datetime that\n         * fills the entire container.\n         */\n        this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n            const { overlayEl } = this;\n            if (!overlayEl) {\n                return;\n            }\n            if (overlayEl.tagName === 'ION-POPOVER') {\n                /**\n                 * When the presentation on datetime changes,\n                 * we need to wait for the component to re-render\n                 * otherwise the computed width/height of the\n                 * popover content will be wrong, causing\n                 * the popover to not align with the trigger element.\n                 */\n                if (needsPresentationChange) {\n                    await this.waitForDatetimeChanges();\n                }\n                /**\n                 * We pass the trigger button element\n                 * so that the popover aligns with the individual\n                 * button that was clicked, not the component container.\n                 */\n                overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n                        ionShadowTarget: triggerEl,\n                    } }));\n            }\n            else {\n                overlayEl.present();\n            }\n        };\n        this.datetimePresentation = 'date-time';\n        this.dateText = undefined;\n        this.timeText = undefined;\n        this.datetimeActive = false;\n        this.selectedButton = undefined;\n        this.color = 'primary';\n        this.disabled = false;\n        this.datetime = undefined;\n    }\n    async componentWillLoad() {\n        const { datetime } = this;\n        if (!datetime) {\n            printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n            return;\n        }\n        const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n        if (!datetimeEl) {\n            printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n            return;\n        }\n        /**\n         * The element reference must be an ion-datetime. Print an error\n         * if a non-datetime element was provided.\n         */\n        if (datetimeEl.tagName !== 'ION-DATETIME') {\n            printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n            return;\n        }\n        /**\n         * Since the datetime can be used in any context (overlays, accordion, etc)\n         * we track when it is visible to determine when it is active.\n         * This informs which button is highlighted as well as the\n         * aria-expanded state.\n         */\n        const io = new IntersectionObserver((entries) => {\n            const ev = entries[0];\n            this.datetimeActive = ev.isIntersecting;\n        }, {\n            threshold: 0.01,\n        });\n        io.observe(datetimeEl);\n        /**\n         * Get a reference to any modal/popover\n         * the datetime is being used in so we can\n         * correctly size it when it is presented.\n         */\n        const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n        /**\n         * The .ion-datetime-button-overlay class contains\n         * styles that allow any modal/popover to be\n         * sized according to the dimensions of the datetime.\n         * If developers want a smaller/larger overlay all they need\n         * to do is change the width/height of the datetime.\n         * Additionally, this lets us avoid having to set\n         * explicit widths on each variant of datetime.\n         */\n        if (overlayEl) {\n            overlayEl.classList.add('ion-datetime-button-overlay');\n        }\n        componentOnReady(datetimeEl, () => {\n            const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n            /**\n             * Set the initial display\n             * in the rendered buttons.\n             *\n             * From there, we need to listen\n             * for ionChange to be emitted\n             * from datetime so we know when\n             * to re-render the displayed\n             * text in the buttons.\n             */\n            this.setDateTimeText();\n            addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\n            /**\n             * Configure the initial selected button\n             * in the event that the datetime is displayed\n             * without clicking one of the datetime buttons.\n             * For example, a datetime could be expanded\n             * in an accordion. In this case users only\n             * need to click the accordion header to show\n             * the datetime.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'date':\n                case 'month-year':\n                case 'month':\n                case 'year':\n                    this.selectedButton = 'date';\n                    break;\n                case 'time-date':\n                case 'time':\n                    this.selectedButton = 'time';\n                    break;\n            }\n        });\n    }\n    render() {\n        const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: '26e606af6f067a5774db37ed41387ffebb941777', class: createColorClasses(color, {\n                [mode]: true,\n                [`${selectedButton}-active`]: datetimeActive,\n                ['datetime-button-disabled']: disabled,\n            }) }, dateText && (h(\"button\", { key: '6b7aa66a15b4a6d89d411e40586de28a2ac9f343', class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { key: 'd42f34fd167be34386319e7ea788c2ab03c90b87', name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", { key: '47dd34f3c2799064cac7a5fe25440ecc043950f0' }))), timeText && (h(\"button\", { key: 'd77424a20fae320654774c7bfc8a8e2369d3afe3', class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { key: 'ac088a78141bb53f2efd48dd7745f8954c92378b', name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", { key: 'b3a58ddfd28b9396e2518ffd62a045ec13d8b9d0' })))));\n    }\n    get el() { return getElement(this); }\n};\nDatetimeButton.style = {\n    ios: IonDatetimeButtonIosStyle0,\n    md: IonDatetimeButtonMdStyle0\n};\n\nexport { DatetimeButton as ion_datetime_button };\n"],"names":["r","registerInstance","h","e","Host","f","getElement","a","addEventListener","c","componentOnReady","printIonError","createColorClasses","b","getIonMode","s","parseDate","x","getToday","L","getHourCycle","N","getLocalizedDateTime","M","getLocalizedTime","datetimeButtonIosCss","IonDatetimeButtonIosStyle0","datetimeButtonMdCss","IonDatetimeButtonMdStyle0","DatetimeButton","constructor","hostRef","_this","datetimeEl","overlayEl","getParsedDateValues","value","undefined","Array","isArray","setDateTimeText","_a","_b","_c","_d","_e","datetimePresentation","locale","formatOptions","hourCycle","preferWheel","multiple","titleSelectedDatesFormatter","parsedValues","parsedDatetimes","length","firstParsedDatetime","computedHourCycle","dateText","timeText","date","month","day","year","time","headerText","waitForDatetimeChanges","_asyncToGenerator","Promise","resolve","once","handleDateClick","_ref2","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","_x","apply","arguments","handleTimeClick","timeTargetEl","_ref3","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","_x2","_x3","_x4","datetimeActive","color","disabled","datetime","componentWillLoad","_this2","el","document","getElementById","toLowerCase","io","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","render","mode","key","class","id","onClick","part","ref","name","style","ios","md","ion_datetime_button"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}